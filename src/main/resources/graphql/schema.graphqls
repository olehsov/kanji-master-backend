type User {
    id: ID!
    username: String!
    createdAt: String!
    email: String!
    password: String!
    isActive: Boolean!
}

type KanjiInfo {
    kanji: String!
    radical: String!
    radvar: String!
    type: String!
    regularOn: String!
    regularKun: String!
    onyomi: String!
    kunyomi: String!
    nanori: String!
    strokes: Int
    grade: String
    jlpt: String
    kanken: String!
    frequency: Int
    meaning: String!
    compactMeaning: String!
    elements: String!
    kanjiParts: String!
    partOf: String!
}

type Sentence {
    id: Int!
    japanese: String!
    english: String!
    particle: String!
    word: String!
    kanji: String!
    furigana: String!
    obi2: String!
}

type SentencePage {
    content: [Sentence]
    totalPages: Int
    totalElements: Int
    last: Boolean
    size: Int
    number: Int
    numberOfElements: Int
    first: Boolean
}

type KanjiInfoPage {
    content: [KanjiInfo]
    totalPages: Int
    totalElements: Int
    last: Boolean
    size: Int
    number: Int
    numberOfElements: Int
    first: Boolean
}

type RadicalSearchOption {
    radical: String!
    strokes: Int!
    isSimplifiedRadical: Boolean!
}

input KanjiFilter {
    search: String
    grade: [String]
    jlpt: [String]
}

type Topic {
    id: ID!
    header: String!
    description: String!
}

type Query {
    getKanjis(page: Int, size: Int, filter: KanjiFilter): KanjiInfoPage!
    getKanji(kanji: String): KanjiInfo!
    getRadicalSearchOptionDto: [RadicalSearchOption]
    getKanjiesByRadical(radicals: [String]): [KanjiInfo]
    getSentencesByKanji(page: Int, size: Int, kanji: String): SentencePage!
    getAllTopics: [Topic]!
}