type User {
    id: ID!
    username: String!
    createdAt: String!
    email: String!
    password: String!
    isActive: Boolean!
}

type Reading {
    id: ID!
    mainKanji: [String]!
    nameKanji: [String]!
    reading: String!
}

type Meaning {
    id: ID!
    glosses: [String!]!
}
type Variant {
    id: ID!
    written: String!
    pronounced: String!
    priorities: [String!]!
}

type Word {
    id: ID!
    variants: [Variant!]!
    meanings: [Meaning!]!
}

type Kanji {
    id: ID!
    kanji: String!
    grade: Int
    strokeCount: Int
    meanings: [String!]!
    heisigEn: String
    kunReadings: [Reading!]!
    onReadings: [Reading!]!
    nameReadings: [Reading!]!
    jlpt: Int
    unicode: String
    notes: [String!]!
}

type KanjiPage {
    content: [Kanji]
    totalPages: Int
    totalElements: Int
    last: Boolean
    size: Int
    number: Int
    numberOfElements: Int
    first: Boolean
}

type WordPage {
    content: [Word]
    totalPages: Int
    totalElements: Int
    last: Boolean
    size: Int
    number: Int
    numberOfElements: Int
    first: Boolean
}

input KanjiFilter {
    grade: [Int]
    strokeCount: [Int],
    jlpt: [Int]
}

type Query {
    getKanjis(page: Int, size: Int, filter: KanjiFilter): KanjiPage!
    getKanji(id: Int): Kanji!
    getWordsByKanji(page: Int, size: Int, kanjiId: Int): WordPage
    getWordsByKanji(page: Int, size: Int): WordPage
}